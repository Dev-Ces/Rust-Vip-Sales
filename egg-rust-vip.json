{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2024-01-01T00:00:00+00:00",
    "name": "Rust VIP Sales",
    "author": "youremail@example.com",
    "description": "A Flask-based VIP sales system for Rust servers with cryptocurrency payment integration.",
    "features": ["python"],
    "docker_images": {
        "Python 3.9": "ghcr.io/pterodactyl/yolks:python_3.9"
    },
    "file_denylist": [],
    "startup": "python start.py",
    "config": {
        "files": "{}",
        "startup": "{\r\n    \"done\": [\"Running on\", \"* Running on\"]\r\n}",
        "logs": "{}",
        "stop": "^C"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\n\r\ncd \/mnt\/server\r\n\r\necho \"Creating project structure...\"\r\n\r\n# Create project directories\r\nmkdir -p app/templates/admin\r\nmkdir -p app/static\r\n\r\n# Create requirements.txt\r\ncat > requirements.txt <<'EOL'\r\nFlask==3.0.0\r\nFlask-SQLAlchemy==3.1.1\r\nFlask-Login==0.6.3\r\nFlask-WTF==1.1.1\r\npython-dotenv==1.0.0\r\nrequests==2.31.0\r\nbcrypt==4.0.1\r\nFlask-Migrate==4.0.5\r\nWerkzeug==3.0.1\r\npython-dateutil==2.8.2\r\nrcon==1.3.8\r\nEOL\r\n\r\n# Create start.py\r\ncat > start.py <<'EOL'\r\nimport os\r\nimport subprocess\r\nimport sys\r\n\r\ndef install_requirements():\r\n    \"\"\"Install required packages to user's home directory\"\"\"\r\n    try:\r\n        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--user', '-r', 'requirements.txt'])\r\n        return True\r\n    except subprocess.CalledProcessError:\r\n        return False\r\n\r\ndef main():\r\n    # İlk olarak requirements'ları yükle\r\n    print(\"Installing requirements...\")\r\n    if not install_requirements():\r\n        print(\"Error installing requirements!\")\r\n        sys.exit(1)\r\n\r\n    # Python path'ine kullanıcının site-packages'ını ekle\r\n    python_version = f\"python{sys.version_info.major}.{sys.version_info.minor}\"\r\n    user_site_packages = os.path.expanduser(f\"~/.local/lib/{python_version}/site-packages\")\r\n    sys.path.append(user_site_packages)\r\n\r\n    # Şimdi uygulamayı başlat\r\n    from app import create_app\r\n    app = create_app()\r\n    \r\n    port = int(os.environ.get('PORT', 8080))\r\n    app.run(host='0.0.0.0', port=port)\r\n\r\nif __name__ == '__main__':\r\n    main()\r\nEOL\r\n\r\n# Create .env file\r\ncat > .env <<'EOL'\r\nSECRET_KEY=change-this-to-a-secure-secret-key\r\nDATABASE_URL=sqlite:///app.db\r\nADMIN_USERNAME=admin\r\nADMIN_PASSWORD=change-this-to-a-secure-password\r\nCRYPTO_ADDRESS=your-cryptocurrency-wallet-address\r\nPORT=8080\r\n\r\n# Rust Server RCON Settings\r\nRCON_HOST=your-rust-server-ip\r\nRCON_PORT=28016\r\nRCON_PASSWORD=your-rcon-password\r\nEOL\r\n\r\n# Create __init__.py\r\ncat > app/__init__.py <<'EOL'\r\nfrom flask import Flask\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom flask_login import LoginManager\r\nfrom config import Config\r\n\r\ndb = SQLAlchemy()\r\nlogin_manager = LoginManager()\r\n\r\ndef create_app():\r\n    app = Flask(__name__)\r\n    app.config.from_object(Config)\r\n\r\n    db.init_app(app)\r\n    login_manager.init_app(app)\r\n    login_manager.login_view = 'auth.login'\r\n\r\n    from app.routes import main\r\n    app.register_blueprint(main)\r\n\r\n    with app.app_context():\r\n        db.create_all()\r\n\r\n    return app\r\nEOL\r\n\r\n# Create config.py\r\ncat > config.py <<'EOL'\r\nimport os\r\nfrom dotenv import load_dotenv\r\n\r\nload_dotenv()\r\n\r\nclass Config:\r\n    SECRET_KEY = os.getenv('SECRET_KEY', 'dev')\r\n    SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL', 'sqlite:///app.db')\r\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\r\n    ADMIN_USERNAME = os.getenv('ADMIN_USERNAME', 'admin')\r\n    ADMIN_PASSWORD = os.getenv('ADMIN_PASSWORD', 'admin')\r\n    CRYPTO_ADDRESS = os.getenv('CRYPTO_ADDRESS', '')\r\nEOL\r\n\r\necho \"Installation completed! You can now start the server.\"\r\n",
            "container": "python:3.9-slim",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "Admin Username",
            "description": "Username for admin panel access",
            "env_variable": "ADMIN_USERNAME",
            "default_value": "admin",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:20",
            "field_type": "text"
        },
        {
            "name": "Admin Password",
            "description": "Password for admin panel access",
            "env_variable": "ADMIN_PASSWORD",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|min:8",
            "field_type": "text"
        },
        {
            "name": "Crypto Address",
            "description": "Your cryptocurrency wallet address for payments",
            "env_variable": "CRYPTO_ADDRESS",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string",
            "field_type": "text"
        },
        {
            "name": "Server Port",
            "description": "The port the application will run on",
            "env_variable": "PORT",
            "default_value": "8080",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|numeric|min:1024|max:65535",
            "field_type": "text"
        }
    ]
} 